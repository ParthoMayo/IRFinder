#!/bin/bash

set -e
LIBEXEC=$(dirname "$(readlink -nf "$BASH_SOURCE")")/util
source $LIBEXEC/bash_utils.sh 


function usage() {
  echo "" >&2
  echo "IRFinder version: $VERSION" >&2
  echo "Usage: IRFinder BuildRefFromSTARRef [-v][-h][-t INT][-j INT][-e ExtraGenomeRef.fa][-b Blacklist.bed][-R ROI.bed][-m Mapability.bed] -r ReferenceDir -x STARRefDir" >&2
  echo "" >&2
  echo "  required:" >&2
  echo "    -r ReferenceDir: Directory should not yet exist, will be created." >&2
  echo "    -x STARRefDir. An existing STAR reference folder." >&2
  echo "       Please note: By default, BuildRefFromSTARRef mode automatically looks for the original FASTA and GTF files used to generate STARRefDir." >&2
  echo "       Specifically, IRFinder investigates 'genomeParameters.txt' in STARRefDir." >&2
  echo "       If both files can be located, IRFinder will continue to generate reference, ignoring '-f' and '-g' options." >&2
  echo "       If either file is missing, IRFinder will quit and you have to re-run it by giving both '-f' and '-g' options." >&2
  echo "" >&2
  echo "  optional:" >&2
  echo "    -t Threads: The number of physical CPUs to use by IRFinder. When ommited (default), IRFinder will use all physical CPUs." >&2
  echo "    -M Mapability: A precomputed bed file containing the low mapability areas. Can also be an empty file." >&2
  echo "    -n MapabilityReadLength: The length of the reads used to compute the mapability. Default: 70" >&2
  echo "    -f GENOME.fa: This MUST be the same FASTA file used to generate STARRefDir. Ignored when IRFinder can automatically locate the original file." >&2
  echo "    -g TRANSCRIPTS.gtf: This MUST be the same GTF file used to generate STARRefDir. Ignored when IRFinder can automatically locate the original file." >&2
  echo "    -e ExtraGenomeRef.fasta.gz: Typically an ERCC reference." >&2
  echo "    -b Blacklist.bed.gz: BED of regions to be excluded from analysis." >&2
  echo "    -R ROI.bed.gz: A non-overlapping BED file of additional Regions of Interest for read counts." >&2
  echo "    -l Don't copy the STAR reference and the other files but create symbolic links." >&2
  echo "    -v Show version number of current IRFinder." >&2
  echo "    -h Show this usage information." >&2
  echo "" >&2
  exit 1
}


# === Defaults ===
THREADS=0
REF=
SJOH=150
BUILDERCCFILE=
BUILDROI=
BUILDBLACK=
STAREXEC=STAR
MYFASTA="NULL"
MYGTF="NULL"
LINK=0
MAPABILITY_FILE=
MAPABILITY_LEN=100

if [ $# -eq 0 ] || [[ $1 == "--help"  ]] ; then
  usage
fi


while getopts ":m:r:t:S:e:b:R:x:f:g:m:M:n:hvl" opt; do
  case $opt in
    r)
      # Reference directory.
      REF=$OPTARG
      if [ -d "$REF" ]; then
              echo "Argument error: -r $REF. Reference directory must not exist, BuildRef will create it." >&2
              exit 1
            fi
      ;;
    t)
      ## Number of threads to use. (must be a positive integer. Zero ok, means auto-detect.)
      if [[ ! $OPTARG =~ ^[0-9]+$ ]]; then
        echo "Argument error: -t $OPTARG, number of threads must be an integer." >&2
        exit 1
      fi
      THREADS=$OPTARG
      ;;
    S)
      ## STAR executable. (must be executable!)
      if [ -x "$OPTARG" -a ! -d "$OPTARG" ]; then
        STAREXEC=$OPTARG
      else
        echo "Argument error: -S $OPTARG. STAR executable must be an executable program." >&2
        exit 1
      fi
      ;;
    e)
      #ERCC file. (must be a file)
      if [ ! -f "$OPTARG" ]; then
        echo "Argument error: -e $OPTARG. Specified ERCC/extra-reference file does not exist." >&2
        exit 1
      fi
      BUILDERCCFILE=$OPTARG
      ;;
    b)
      #Blacklist local file (must be a file)
      if [ ! -f "$OPTARG" ]; then
        echo "Argument error: -b $OPTARG. Specified blacklist file does not exist." >&2
        exit 1
      fi
      BUILDBLACK=$OPTARG
      ;;
    R)
      #ROI local file. (must be a file)
      if [ ! -f "$OPTARG" ]; then
        echo "Argument error: -R $OPTARG. Specified ROI file does not exist." >&2
        exit 1
      fi
      BUILDROI=$OPTARG
      ;;
    M)
      if [ ! -f "$OPTARG" ]; then
        echo "Argument error: -m $OPTARG. Specified Mapability file does not exist." >&2
        exit 1
      fi
      MAPABILITY_FILE=$OPTARG
      ;;
    n)
      if [[ ! $OPTARG =~ ^[0-9]+$ ]]; then
  		echo "Argument error: -n $OPTARG, must be an integer." >&2
		exit 1
      fi
	  MAPABILITY_LEN=$OPTARG
	  ;;
    x)
      #
      STARREF=$(realpath $OPTARG)
      ## Must be a directory
      ;;
    f)
      # The original FASTA file to generate STAR reference.
      MYFASTA=$(realpath $OPTARG)
      checkFile $MYFASTA
      ;;
    g)
      # The original GTF file to generate STAR reference.
      MYGTF=$(realpath $OPTARG)
      checkFile $MYGTF
      ;;
    h)
      usage
      ;;
    v)
        versionAlert
        ;; 
    l)
        LINK=1
        ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
shift $(($OPTIND - 1))

#echo $@  #The remaining arguments.
#echo $#  #The number of remaining arguments. 

if [ ! "$REF" ]; then
  echo "Argument error: -r is required." >&2
  exit 1  
fi

if [ -d "$REF" ]; then
    echo "Argument error: -r $REF. Reference directory must not exist, BuildRef will create it." >&2
    exit 1
fi

if [[ "${MAPABILITY_FILE}" == "" ]]; then
    checkStar $STAREXEC
fi

setThreads

if [ ! "$STARREF" ]; then
  echo "Argument error: -x is required. Must provide an exisiting STAR reference folder for BuildRefProcess mode." >&2
  exit 1
fi
if [ ! -d "$STARREF" ]; then
  echo "Error: STAR reference at $STARREF does not exist." >&2
  exit 1
fi


if [[ "${MYFASTA}" == "NULL" ]] || [[ "${MYGTF}" == "NULL" ]] ; then
    if [ ! -f "$STARREF/genomeParameters.txt" ] ; then
      echo "Error: Cannot locate the original FASTA and GTF files used to generate STAR reference at $STARREF." >&2
      echo "       Please provide these two files through '-f' and '-g' options respectively." >&2
      echo "       Or retry to build IRFinder reference in other modes." >&2
      echo "       Run 'IRFinder -h' for more details." >&2
      exit 1
    fi
    STARLINE=$(head -n 1 $STARREF/genomeParameters.txt)
    STARTMP1=(${STARLINE#*--genomeFastaFiles })
    STARTMP2=(${STARLINE#*--sjdbGTFfile })
    ORIFASTA=${STARTMP1[0]}
    ORIGTF=${STARTMP2[0]}
    if [[ "${MYFASTA}" == "NULL" ]]; then
        MYFASTA="${ORIFASTA}"
    fi
    if [[ "${MYGTF}" == "NULL" ]]; then
        MYGTF="${ORIGTF}"
    fi
fi


#get the original fasta and gtf file used to generate STAR reference using the parameters saved in 'genomeParameters.txt'
if [ ! -f "$MYFASTA" ] || [ ! -f "$MYGTF" ]; then
    echo "Error: Cannot locate the original FASTA and GTF files used to generate the STAR reference $STARREF" >&2
    echo "       at the following locations:" >&2
    echo "       FASTA: $ORIFASTA" >&2
    echo "       GTF: $ORIGTF" >&2
    echo "       Please locate these two files through '-f' and '-g' options respectively." >&2
    echo "       Or retry to build IRFinder reference in other modes." >&2
    echo "       Run 'IRFinder -h' for more details." >&2
    exit 1
fi

if [ $LINK -eq 1 ]; then
    CP_CMD="ln -s "    
else
    CP_CMD="cp "        
fi

MYFASTA=$(realpath $MYFASTA )
MYGTF=$(realpath $MYGTF )
REF=$(realpath $REF )

echo "Launching reference build process. The full build might take hours."
echo "<Phase 1: STAR Reference Preparation>"
mkdir "$REF"
date +"%b %d %T ... copying the genome FASTA file..."
$CP_CMD "$MYFASTA" "$REF/genome.fa"
date +"%b %d %T ... copying the transcriptome GTF file..."
$CP_CMD "$MYGTF" "$REF/transcripts.gtf"
date +"%b %d %T ... copying the STAR reference folder..."
$CP_CMD -r "$STARREF" "$REF/STAR"

"$LIBEXEC/IRFinder-BuildRefFromEnsembl" "BuildRefFromSTARRef" "$THREADS" "$STAREXEC" "$BUILDHINT" "$REF" "$BUILDERCCFILE" "$BUILDROI" "$BUILDBLACK" "$SJOH" "$MAPABILITY_FILE" "$MAPABILITY_LEN"




