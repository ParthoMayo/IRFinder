#!/bin/bash

set -e
LIBEXEC=$(dirname "$(readlink -nf "$BASH_SOURCE")")/util
source $LIBEXEC/bash_utils.sh 


function usage() {
	echo "" >&2
	echo "IRFinder version: $VERSION" >&2
	echo "Usage: IRFinder BuildRefProcess [-v][-h][-t INT][-j INT][-e ExtraGenomeRef.fa][-b Blacklist.bed][-R ROI.bed][-m Mapability.bed] -r ReferenceDir " >&2
	echo "" >&2
	echo "Parameters for BuildRefProcess mode:" >&2
	echo "  required:" >&2
	echo "    -r ReferenceDir. Directory should already contain EXACT files named 'genome.fa' and 'transcripts.gtf' (case-sensitive) for genome and transcriptome annotations respectively." >&2
	echo "  optional:" >&2
	echo "    -t Threads: The number of physical CPUs to use by IRFinder. When ommited (default), IRFinder will use all physical CPUs." >&2
	echo "    -j INTEGER: an integer that is parsed to '--sjdbOverhang' under STAR 'genomeGenerate' mode. Default: 150." >&2
	echo "    -e ExtraGenomeRef.fasta.gz: Typically an ERCC reference." >&2
	echo "    -b Blacklist.bed.gz: BED of regions to be excluded from analysis." >&2
	echo "    -R ROI.bed.gz: A non-overlapping BED file of additional Regions of Interest for read counts." >&2
    echo "    -m Mapability: A precomputed bed file containing the low mapability areas. Can also be an empty file." >&2
    echo "    -n MapabilityReadLength: The length of the reads used to compute the mapability. Default: 70" >&2    
	echo "" >&2
	exit 1
}


# === Defaults ===
THREADS=0
REF=
SJOH=150
BUILDERCCFILE=
BUILDROI=
BUILDBLACK=
STAREXEC=STAR
MAPABILITY_FILE=
MAPABILITY_LEN=100

if [ $# -eq 0 ] || [[ $1 == "--help"  ]] ; then
	usage
fi


while getopts ":m:r:j:t:S:e:b:R:M:l:hv" opt; do
	case $opt in
		r)
			# Reference directory.
			REF=$OPTARG
			;;
		j) # STAR's --sjdbOverhang
			if [[ $OPTARG =~ ^[0-9]+$ ]] ; then 
				SJOH=$OPTARG
			else
				echo "Argument error: -j $OPTARG. '$OPTARG' is not an integer." >&2
				exit 1
			fi
			;;
		t)
			## Number of threads to use. (must be a positive integer. Zero ok, means auto-detect.)
			if [[ ! $OPTARG =~ ^[0-9]+$ ]]; then
				echo "Argument error: -t $OPTARG, number of threads must be an integer." >&2
				exit 1
			fi
			THREADS=$OPTARG
			;;
		S)
			## STAR executable. (must be executable!)
			if [ -x "$OPTARG" -a ! -d "$OPTARG" ]; then
				STAREXEC=$OPTARG
			else
				echo "Argument error: -S $OPTARG. STAR executable must be an executable program." >&2
				exit 1
			fi
			;;
		e)
			#ERCC file. (must be a file)
			if [ ! -f "$OPTARG" ]; then
				echo "Argument error: -e $OPTARG. Specified ERCC/extra-reference file does not exist." >&2
				exit 1
			fi
			BUILDERCCFILE=$OPTARG
			;;
		b)
			#Blacklist local file (must be a file)
			if [ ! -f "$OPTARG" ]; then
				echo "Argument error: -b $OPTARG. Specified blacklist file does not exist." >&2
				exit 1
			fi
			BUILDBLACK=$OPTARG
			;;
		R)
			#ROI local file. (must be a file)
			if [ ! -f "$OPTARG" ]; then
				echo "Argument error: -R $OPTARG. Specified ROI file does not exist." >&2
				exit 1
			fi
			BUILDROI=$OPTARG
			;;
        M)
          if [ ! -f "$OPTARG" ]; then
            echo "Argument error: -m $OPTARG. Specified Mapability file does not exist." >&2
            exit 1
          fi
          MAPABILITY_FILE=$OPTARG
          ;;
        n)
          if [[ ! $OPTARG =~ ^[0-9]+$ ]]; then
    		echo "Argument error: -n $OPTARG, must be an integer." >&2
			exit 1
          fi
		  MAPABILITY_LEN=$OPTARG
		  ;;
		h)
			usage
			;;
		v)
		    versionAlert
		    ;; 
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
shift $(($OPTIND - 1))

#echo $@  #The remaining arguments.
#echo $#  #The number of remaining arguments. 

if [ ! "$REF" ]; then
	echo "Argument error: -r is required." >&2
	exit 1	
fi

checkStar $STAREXEC
setThreads

if [ ! -f "$REF/genome.fa" ] || [ ! -f "$REF/transcripts.gtf" ]; then
	echo "Argument error: -r $REF. Reference directory must exist and contain genome.fa and transcripts.gtf files. Use the BuildRefDownload run mode to create these." >&2
	exit 1
fi

if [ -d "$REF/STAR" ] || [ -d "$REF/Mapability" ] || [ -d "$REF/IRFinder" ]; then
	echo "Argument error: -r $REF. Will not overwrite. It appears BuildRefProcess has already been run for this reference. Reference directory must not contain STAR, Mapability or IRFinder directories." >&2
	exit 1
fi


echo "Launching reference build process. The full build might take hours."
"$LIBEXEC/IRFinder-BuildRefFromEnsembl" "BuildRefProcess" "$THREADS" "$STAREXEC" "" "$REF" "$BUILDERCCFILE" "$BUILDROI" "$BUILDBLACK" "$SJOH" "$MAPABILITY_FILE" "$MAPABILITY_LEN"



