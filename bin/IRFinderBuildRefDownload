#!/bin/bash
set -e

LIBEXEC=$(dirname "$(readlink -nf "$BASH_SOURCE")")/util
source $LIBEXEC/bash_utils.sh 


function usage() {
	echo "" >&2
	echo "IRFinder version: $VERSION" >&2
	echo "Usage: IRFinder BuildRefDownload [-v][-h] -r ReferenceDir URL" >&2
	echo "" >&2
	echo "  required:" >&2
	echo "    URL A base Ensembl URL to a (gzipped) gtf file. For example: ftp://ftp.ensembl.org/pub/release-100/gtf/homo_sapiens/Homo_sapiens.GRCh38.100.gtf.gz" >&2
	echo "    -r ReferenceDir: Directory should not yet exist, will be created." >&2
	echo "" >&2
	echo "  optional:" >&2
	echo "    -v Show version number of current IRFinder." >&2
	echo "    -h Show this usage information." >&2
	echo "" >&2
	exit 1
}


# === Defaults ===
REF=
STAREXEC=STAR


if [ $# -eq 0 ] || [[ $1 == "--help"  ]] ; then
	usage
fi


while getopts ":m:r:hv" opt; do
	case $opt in
		r)
			# Reference directory.
			REF=$OPTARG
			if [ -d "$REF" ]; then
            	echo "Argument error: -r $REF. Reference directory must not exist, BuildRef will create it." >&2
            	exit 1
            fi
			;;
		h)
			usage
			;;
		v)
		    versionAlert
		    ;; 
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
shift $(($OPTIND - 1))

#echo $@  #The remaining arguments.
#echo $#  #The number of remaining arguments. 

if [ ! "$REF" ]; then
	echo "Argument error: -r is required." >&2
	exit 1	
fi


if [ ! $# -eq 1 ]; then
	echo "Argument error: in run mode BuildRefDownload, provide a single ftp URL. $# arguments found." >&2
	exit 1
fi

BUILDHINT=$1
if [[ "$BUILDHINT" != ftp* ]]; then
	echo "Argument error: A single ftp url is required to find and download genome fasta and gtf files. eg: ftp://ftp.ensembl.org/pub/release-78/fasta/mus_musculus/dna/." >&2
	exit 1
fi


echo "Launching reference build process. The full build might take hours."

"$LIBEXEC/IRFinder-BuildRefFromEnsembl" BuildRefDownload "1" "" "$BUILDHINT" "$REF" "" "" "" ""


